@using Masuit.Tools.Systems
@using Jx.Cms.Rewrite
@using Blogs.Model

@inject ToastService ToastService
<br/>

<Toast></Toast>
<Row ItemsPerRow="ItemsPerRow.Two">
    <h3>Blogs伪静态设置</h3>
    <Button OnClick="Save" style="float: right">保存</Button>
</Row>

<table class="table">
    <tbody>
    <tr>
        <td style="width: 20%">静态化选项 </td>
        <td style="width: 80%"><RadioList TValue="string" Items="@_optionItem" OnSelectedChanged="OnSelectedChanged"></RadioList ></td>
    </tr>
    <tr>
        <td>文章URL配置</td>
        <td><BootstrapInput @bind-Value="@RewriterModel.ArticleUrl" IsDisabled="@_isDisabled"></BootstrapInput></td>
    </tr>
    <tr>
        <td></td>
        <td><RadioList TValue="string" Items="@_articleItems" IsVertical="true" OnSelectedChanged="ArticleChange" IsDisabled="_isDisabled"></RadioList></td>
    </tr>
    <tr>
        <td>页面的URL配置</td>
        <td><BootstrapInput @bind-Value="@RewriterModel.PageUrl" IsDisabled="@_isDisabled"></BootstrapInput></td>
    </tr>
    <tr>
        <td></td>
        <td><RadioList TValue="string" Items="@_pageItems" IsVertical="true" OnSelectedChanged="PageChange" IsDisabled="_isDisabled"></RadioList></td>
    </tr>
    <tr>
        <td>首页URL配置</td>
        <td><BootstrapInput @bind-Value="@RewriterModel.IndexUrl" IsDisabled="@_isDisabled"></BootstrapInput></td>
    </tr>
    <tr>
        <td></td>
        <td><RadioList TValue="string" Items="@_indexItems" IsVertical="true" OnSelectedChanged="IndexChange" IsDisabled="_isDisabled"></RadioList></td>
    </tr>
    </tbody>
</table>

<style>
    .radio-list .form-check {
        width: 200px;
    }
</style>

@code {
    
    // 伪静态选项Radio
    private IEnumerable<SelectedItem> _optionItem;

    // 文章推荐Radio
    private readonly IEnumerable<SelectedItem> _articleItems = new[]
    {
        new SelectedItem("/post/{{id}}.html", "/post/{{id}}.html"), new SelectedItem("/post/{{alias}}.html", "/post/{{alias}}.html")
            , new SelectedItem("/{{year}}/{{month}}/{{id}}/", "/{{year}}/{{month}}/{{id}}/"), new SelectedItem("/{{category}}/{{alias}}/", "/{{category}}/{{alias}}/")
    };
    
    // 页面推荐Radio
    private readonly IEnumerable<SelectedItem> _pageItems = new[]
    {
        new SelectedItem("/{{id}}.html", "/{{id}}.html"), new SelectedItem("/{{alias}}.html", "/{{alias}}.html")
        , new SelectedItem("/{{alias}}/", "/{{alias}}/")
    };
    
    // 首页推荐Radio
    private readonly IEnumerable<SelectedItem> _indexItems = new[]
    {
        new SelectedItem("/page_{{page}}.html", "/page_{{page}}.html"), new SelectedItem("/page_{{page}}/", "/page_{{page}}/")
        , new SelectedItem("/page/{{page}}/", "/page/{{page}}/")
    };

    private RewriterModel RewriterModel { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RewriterModel = Model.RewriterModel.GetSettings();
        _optionItem = typeof(RewriteOptionEnum).ToSelectList().ToList();
        _isDisabled = RewriterModel.RewriteOption != RewriteOptionEnum.Rewrite.ToString();
        _optionItem.First(x => x.Value == RewriterModel.RewriteOption).Active = true;
        StateHasChanged();
    }

    // 是否禁用
    private bool _isDisabled = false;

    private Task ArticleChange(IEnumerable<SelectedItem> arg1, string arg2)
    {
        RewriterModel.ArticleUrl = arg2;
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private Task PageChange(IEnumerable<SelectedItem> arg1, string arg2)
    {
        RewriterModel.PageUrl = arg2;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task IndexChange(IEnumerable<SelectedItem> arg1, string arg2)
    {
        RewriterModel.IndexUrl = arg2;
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private void Save()
    {
        RewriterModel.SaveSettings(RewriterModel);
        ToastService.Success("修改成功", "Blogs伪静态规则设置成功");
    }

    private Task OnSelectedChanged(IEnumerable<SelectedItem> arg1, string arg2)
    {
        RewriterModel.RewriteOption = arg2;
        if (arg2 == RewriteOptionEnum.Dynamic.ToString())
        {
            _isDisabled = true;
        }
        else if (arg2 == RewriteOptionEnum.Rewrite.ToString())
        {
            _isDisabled = false;
        }
        StateHasChanged();
        return Task.CompletedTask;
    }

}