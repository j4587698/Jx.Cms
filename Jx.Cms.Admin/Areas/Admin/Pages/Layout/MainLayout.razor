@using Jx.Cms.Common.Extensions
@using Furion
@using Jx.Cms.Common.Attribute
@using Jx.Cms.Common.Utils
@using Jx.Cms.Entities.Admin
@using Jx.Cms.Plugin.Utils
@using Jx.Cms.Service.Admin
@inherits LayoutComponentBase

@inject IAdminMenuService _adminMenuService
@inject MessageService _messageService
@inject NavigationManager _navigationManager
@inject IAdminUserService _adminUserService
@inject IDispatchService<string> DispatchService

<Layout SideWidth="0" IsPage="true" IsFullSide="true" IsFixedHeader="true" IsFixedFooter="true" AdditionalAssemblies="new[] { GetType().Assembly }"
        ShowFooter="true" ShowCollapseBar="true" OnCollapsed="@OnCollapsed" Menus="@_menuItems">
    <Header>
        <span class="ms-3 flex-sm-fill d-none d-sm-block">JX.CMS</span>
        <div class="flex-fill d-sm-none">
        </div>
        <Logout ImageUrl="@Util.GetWebAvatarUrl(_adminUser.Email)" DisplayName="@_adminUser.NickName" UserName="@_adminUser.UserName">
            <LinkTemplate>
                <LogoutLink Url="/Admin/Logout"></LogoutLink>
            </LinkTemplate>
        </Logout>
    </Header>
    <Side>
        <div class="layout-banner">
            <img class="layout-logo" src="_content/BootstrapBlazor.Shared/images/brand.png" />
            <div class="layout-title">
                <span>JX.CMS</span>
            </div>
        </div>
    </Side>
    <Main>
        <CascadingValue Value="this" IsFixed="true">
            @Body
        </CascadingValue>
    </Main>
    <Footer>
        <div class="text-center flex-fill">
            <a href="/" target="_blank">JX.CMS</a>
        </div>
    </Footer>
</Layout>

@code
{

    /// <summary>
    ///获得/设置 是否收缩侧边栏
    /// </summary>
    public bool IsCollapsed { get; set; }

    private Task OnCollapsed(bool collapsed)
    {
        IsCollapsed = collapsed;
        return Task.CompletedTask;
    }

    private List<MenuItem> _menuItems;

    private AdminUserEntity _adminUser;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GetIconSideMenuItems();
        DispatchService.Subscribe(Notify);
    }

    private Task Notify(DispatchEntry<string> payload)
    {
        if (payload.Name != "menu")
        {
            return Task.CompletedTask;
        }
        GetIconSideMenuItems();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void GetIconSideMenuItems()
    {
        _adminUser = _adminUserService.GetUserByUserName(App.User.Identity.Name);
        var menuAttributes = _adminMenuService.GetAllMenu();
        menuAttributes.AddRange(PluginUtil.OnMenuShow().Select(x => new MenuAttribute(x.MenuId, x.DisplayName, $"/PluginPage/{x.MenuId}", -1, x.Icon, x.ParentId??"")));
        _menuItems = new List<MenuItem>();
        foreach (var attribute in menuAttributes.Where(x => x.ParentId.IsNullOrEmpty()).OrderByDescending(x => x.Order))
        {
            MenuItem menuItem = new MenuItem();
            menuItem.Icon = attribute.IconClass;
            menuItem.Text = attribute.DisplayName;
            menuItem.Url = attribute.Path;
            GenerateMenu(menuItem, attribute.Id, menuAttributes);
            _menuItems.Add(menuItem);
        }
    }

    private void GenerateMenu(MenuItem item, string parentId, List<MenuAttribute> menuAttributes)
    {
        var menus = menuAttributes.Where(x => x.ParentId == parentId).OrderByDescending(x => x.Order);
        List<MenuItem> items = new List<MenuItem>();
        foreach (var menuAttribute in menus)
        {
            MenuItem menuItem = new MenuItem();
            menuItem.Icon = menuAttribute.IconClass;
            menuItem.Text = menuAttribute.DisplayName;
            menuItem.Url = menuAttribute.Path;
            if (menuAttributes.Any(x => x.ParentId == menuAttribute.Id))
            {
                GenerateMenu(menuItem, menuAttribute.Id, menuAttributes);
            }
            items.Add(menuItem);
        }
        item.Items = items;
    }
    
    private void Dispose(bool disposing)
    {
        if (disposing)
        {
            DispatchService.UnSubscribe(Notify);
        }
    }
}
