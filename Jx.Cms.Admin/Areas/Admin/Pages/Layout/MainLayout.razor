@using Jx.Cms.Common.Extensions
@using System.Diagnostics.CodeAnalysis
@using Jx.Cms.Common.Attribute
@using Jx.Cms.Service
@using Jx.Cms.Service.Admin
@inherits LayoutComponentBase

@inject IMenuService MenuService
@inject MessageService MessageService
@inject NavigationManager NavigationManager

<Message />
<Toast />
<SweetAlert />
<Layout SideWidth="0" IsPage="true" IsFullSide="true" IsFixedHeader="true" IsFixedFooter="true"
        ShowFooter="true" ShowCollapseBar="true" OnCollapsed="@OnCollapsed" Menus="@GetIconSideMenuItems()">
    <Header>
        <span class="ml-3 flex-fill"></span>
        <img src="_content/BootstrapBlazor.Shared/images/Argo.png" class="layout-avatar-right" />
        <span class="ml-3 d-none d-sm-block">超级管理员</span>
    </Header>
    <Side>
        <div class="layout-banner">
            <img class="layout-logo" src="_content/BootstrapBlazor.Shared/images/brand.png" />
            <div class="layout-title">
                <span>JX.CMS</span>
            </div>
        </div>
    </Side>
    <Main>
        <CascadingValue Value="this" IsFixed="true">
            @Body
        </CascadingValue>
    </Main>
    <Footer>
        <div class="text-center flex-fill">
            <a href="https://gitee.com/LongbowEnterprise/BootstrapAdmin" target="_blank">JX.CMS</a>
        </div>
    </Footer>
</Layout>

@code
{

    /// <summary>
    ///获得/设置 是否收缩侧边栏
    /// </summary>
    public bool IsCollapsed { get; set; }

    private Task OnCollapsed(bool collapsed)
    {
        IsCollapsed = collapsed;
        return Task.CompletedTask;
    }

    private List<MenuItem> _menuItems;
    

    private IEnumerable<MenuItem> GetIconSideMenuItems()
    {
        var menuAttributes = MenuService.GetAllMenu();
        _menuItems = new List<MenuItem>();
        foreach (var attribute in menuAttributes.Where(x => x.ParentId == "").OrderByDescending(x => x.Order))
        {
            MenuItem menuItem = new MenuItem();
            menuItem.Icon = attribute.IconClass;
            menuItem.Text = attribute.DisplayName;
            menuItem.Url = attribute.Path;
            GenerateMenu(menuItem, attribute.Id, menuAttributes);
            _menuItems.Add(menuItem);
        }
        return _menuItems;
    }
    
    private void GenerateMenu(MenuItem item, string parentId, List<MenuAttribute> menuAttributes)
    {
        var menus = menuAttributes.Where(x => x.ParentId == parentId).OrderByDescending(x => x.Order);
        foreach (var menuAttribute in menus)
        {
            MenuItem menuItem = new MenuItem();
            menuItem.Icon = menuAttribute.IconClass;
            menuItem.Text = menuAttribute.DisplayName;
            menuItem.Url = menuAttribute.Path;
            if (menuAttributes.Any(x => x.ParentId == menuAttribute.Id))
            {
                GenerateMenu(menuItem, menuAttribute.Id, menuAttributes);
            }
            item.AddItem(menuItem);
        }
    }
}
