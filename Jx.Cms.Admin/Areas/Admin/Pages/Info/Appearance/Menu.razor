@page "/Appearance/Menu"
@using Jx.Cms.Common.Attribute
@using Jx.Cms.Common.Enum
@using Jx.Cms.Entities.Article
@using Jx.Cms.Entities.Front
@using Jx.Cms.Service.Admin
@using Jx.Cms.Service.Both
@using System.Collections
@inject IPageService PageService
@inject IArticleService ArticleService
@inject IMenuService MenuService
@inject MessageService MessageService
@inject ICatalogService CatalogService

@attribute [Menu("909EBEB6-3865-42CC-9E63-AF036B7AD2A3", "菜单", "/Appearance/Menu", 10, iconClass:"fa fa-newspaper-o", MenuIds.AppearanceId)]

<div class="row">
    <div class="col-4">
        <h4>添加菜单项</h4>
        <Collapse IsAccordion="true" ShowArrow="true">
            <CollapseItems>
                <CollapseItem Text="分类目录" IsCollapsed="true">
                    <Tab OnClickTab="OnCatalogueClick">
                        <TabItem Text="最近">
                            <CheckboxList @bind-Value="@_lateCatalogueValue" Items="@_lateCatalogue" ShowBorder="false" IsVertical="true"></CheckboxList>
                        </TabItem>
                        <TabItem Text="所有">
                            <Pagination PageItems="10" TotalCount="@_catalogueTotal" ShowPaginationInfo="false" OnPageClick="OnCatalogueClick"></Pagination>
                            <CheckboxList @bind-Value="@_allCatalogueValue" Items="@_allCatalogue" ShowBorder="false" IsVertical="true"></CheckboxList>
                        </TabItem>
                        <TabItem Text="搜索">
                            <BootstrapInput TValue="string" @oninput="@CatalogueSearch"></BootstrapInput>
                            <CheckboxList @bind-Value="@_searchCatalogueValue" Items="@_searchCatalogue" ShowBorder="false" IsVertical="true"></CheckboxList>
                        </TabItem>
                    </Tab>
                    <Row ItemsPerRow="ItemsPerRow.One" RowType="RowType.FormRow">
                        <Button OnClickWithoutRender="OnCatalogueAddClick">添加到菜单</Button>
                    </Row>
                </CollapseItem>
                <CollapseItem Text="文章">
                    <Tab OnClickTab="OnArticleClick">
                        <TabItem Text="最近">
                            <CheckboxList @bind-Value="@_lateArticleValue" Items="@_lateArticle" ShowBorder="false" IsVertical="true"></CheckboxList>
                        </TabItem>
                        <TabItem Text="所有">
                            <Pagination PageItems="10" TotalCount="@_articleTotal" ShowPaginationInfo="false" OnPageClick="OnArticleClick"></Pagination>
                            <CheckboxList @bind-Value="@_allArticleValue" Items="@_allArticle" ShowBorder="false" IsVertical="true"></CheckboxList>
                        </TabItem>
                        <TabItem Text="搜索">
                            <BootstrapInput TValue="string" @oninput="@ArticleSearch"></BootstrapInput>
                            <CheckboxList @bind-Value="@_searchArticleValue" Items="@_searchArticle" ShowBorder="false" IsVertical="true"></CheckboxList>
                        </TabItem>
                    </Tab>
                    <Row ItemsPerRow="ItemsPerRow.One" RowType="RowType.FormRow">
                        <Button OnClickWithoutRender="OnArticleAddClick">添加到菜单</Button>
                    </Row>
                </CollapseItem>
                <CollapseItem Text="页面">
                    <Tab>
                        <TabItem Text="最近">
                            <CheckboxList @bind-Value="@_latePageValue" Items="@_latePage" ShowBorder="false" IsVertical="true"></CheckboxList>
                        </TabItem>
                        <TabItem Text="所有">
                            <Pagination PageItems="10" TotalCount="@_pageTotal" ShowPaginationInfo="false" OnPageClick="OnPageClick"></Pagination>
                            <CheckboxList @bind-Value="@_allPageValue" Items="@_allPage" ShowBorder="false" IsVertical="true"></CheckboxList>
                        </TabItem>
                        <TabItem Text="搜索">
                            <BootstrapInput TValue="string" @oninput="@PageSearch"></BootstrapInput>
                            <CheckboxList @bind-Value="@_searchPageValue" Items="@_searchPage" ShowBorder="false" IsVertical="true"></CheckboxList>
                        </TabItem>
                    </Tab>
                    <Row ItemsPerRow="ItemsPerRow.One" RowType="RowType.FormRow">
                        <Button OnClickWithoutRender="OnPageAddClick">添加到菜单</Button>
                    </Row>
                </CollapseItem>
                <CollapseItem Text="自定义连接">
                    <BootstrapInput @bind-Value="_urlName" DisplayText="连接名称" ShowLabel="true"></BootstrapInput>
                    <BootstrapInput @bind-Value="_url" DisplayText="连接地址" ShowLabel="true"></BootstrapInput>
                    <Row ItemsPerRow="ItemsPerRow.One" RowType="RowType.FormRow">
                        <Button OnClickWithoutRender="OnCustomUrlAddClick">添加到菜单</Button>
                    </Row>
                </CollapseItem>
            </CollapseItems>
        </Collapse>

    </div>
    <div class="col-8">
        <h4>菜单结构</h4>
        <Table TItem="MenuEntity" IsBordered="true" IsTree="true" OnTreeExpand="OnTreeExpand" @ref="@_table" ShowExtendButtons="true"
               OnQueryAsync="OnQueryAsync" OnSaveAsync="OnSaveAsync" OnDeleteAsync="OnDeleteAsync">
            <TableColumns>
                <TableColumn @bind-Field="@context.Name" Text="菜单名"></TableColumn>
                <TableColumn @bind-Field="@context.MenuType" Text="菜单类型"></TableColumn>
                <TableColumn @bind-Field="@context.NavTitle" Text="导航标签"></TableColumn>
                <TableColumn @bind-Field="@context.Title" Text="描述"></TableColumn>
                <TableColumn @bind-Field="@context.OpenInNewWindow" Text="新标签页打开">
                    <Template Context="value">
                        @(value.Value?"是":"否")
                    </Template>
                </TableColumn>
            </TableColumns>
            <EditTemplate>
                <MenuEdit Context="@context"></MenuEdit>
            </EditTemplate>
        </Table>
    </div>
</div>

@code {

    private Table<MenuEntity> _table;

    #region Catalogue

    private string _pageCatalogue = "最近";

    private List<SelectedItem> _lateCatalogue;
    private string _lateCatalogueValue;

    private long _catalogueTotal;
    private List<SelectedItem> _allCatalogue;
    private string _allCatalogueValue;
    
    private List<SelectedItem> _searchCatalogue = new List<SelectedItem>();
    private string _searchCatalogueValue;

    private Task OnCatalogueClick(int arg1, int arg2)
    {
        _allCatalogue = CatalogService.GetCatalogPage(arg1, arg2, out _catalogueTotal).Select(x => new SelectedItem(x.Id.ToString(), x.Name)).ToList();
        return Task.CompletedTask;
    }
    
    private Task OnCatalogueClick(TabItem arg)
    {
        _pageCatalogue = arg.Text;
        return Task.CompletedTask;
    }

    private void CatalogueSearch(ChangeEventArgs e)
    {
        if (e.Value != null && e.Value.ToString().Length > 1)
        {
            _searchCatalogue = CatalogEntity.Select.Where(x => x.Name.Contains(e.Value.ToString())).OrderByDescending(x => x.Id).ToList(x => new SelectedItem(x.Id.ToString(), x.Name));
        }
    }
    
    private Task OnCatalogueAddClick()
    {
        string[] ids;
        SelectedItem[] items;
        switch (_pageCatalogue)
        {
            case "最近":
                ids = _lateCatalogueValue.Split(',');
                items = _lateCatalogue.Where(x => ids.Contains(x.Value)).ToArray();
                break;
            case "所有":
                ids = _allCatalogueValue.Split(',');
                items = _allCatalogue.Where(x => ids.Contains(x.Value)).ToArray();
                break;
            case "搜索":
                ids = _searchCatalogueValue.Split(',');
                items = _searchCatalogue.Where(x => ids.Contains(x.Value)).ToArray();
                break;
            default:
                return Task.CompletedTask;
        }
        MenuService.SaveMenu(items.Select(x => new MenuEntity() {Name = x.Text, MenuType = MenuTypeEnum.Catalogue, NavTitle = x.Text, TypeId = int.Parse(x.Value)}));
        _table.QueryAsync();
        return Task.CompletedTask;
    }

    #endregion

    #region Page

    private string _pageTab = "最近";

    private List<SelectedItem> _latePage;
    private string _latePageValue;

    private long _pageTotal;
    private List<SelectedItem> _allPage;
    private string _allPageValue;
    
    private List<SelectedItem> _searchPage = new List<SelectedItem>();
    private string _searchPageValue;

    private Task OnPageClick(int arg1, int arg2)
    {
        _allPage = PageService.GetArticlePage(arg1, arg2, out _pageTotal).Select(x => new SelectedItem(x.Id.ToString(), x.Title)).ToList();
        return Task.CompletedTask;
    }

    private void PageSearch(ChangeEventArgs e)
    {
        if (e.Value != null && e.Value.ToString().Length > 1)
        {
            _searchPage = ArticleEntity.Select.Where(x => x.IsPage && x.Title.Contains(e.Value.ToString())).OrderByDescending(x => x.Id).ToList(x => new SelectedItem(x.Id.ToString(), x.Title));
        }
    }
    
    private Task OnPageAddClick()
    {
        string[] ids;
        SelectedItem[] items;
        switch (_pageTab)
        {
            case "最近":
                ids = _latePageValue.Split(',');
                items = _latePage.Where(x => ids.Contains(x.Value)).ToArray();
                break;
            case "所有":
                ids = _allPageValue.Split(',');
                items = _allPage.Where(x => ids.Contains(x.Value)).ToArray();
                break;
            case "搜索":
                ids = _searchPageValue.Split(',');
                items = _searchPage.Where(x => ids.Contains(x.Value)).ToArray();
                break;
            default:
                return Task.CompletedTask;
        }
        MenuService.SaveMenu(items.Select(x => new MenuEntity() {Name = x.Text, MenuType = MenuTypeEnum.Article, NavTitle = x.Text, TypeId = int.Parse(x.Value)}));
        _table.QueryAsync();
        return Task.CompletedTask;
    }
    
    #endregion

    #region Article

    private List<SelectedItem> _lateArticle;
    private string _lateArticleValue;

    private long _articleTotal;
    private List<SelectedItem> _allArticle;
    private string _allArticleValue;
    
    private List<SelectedItem> _searchArticle = new List<SelectedItem>();
    private string _searchArticleValue;

    private Task OnArticleClick(int arg1, int arg2)
    {
        _allArticle = ArticleService.GetArticlePage(arg1, arg2, out _articleTotal).Select(x => new SelectedItem(x.Id.ToString(), x.Title)).ToList();
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private void ArticleSearch(ChangeEventArgs e)
    {
        if (e.Value != null && e.Value.ToString().Length > 1)
        {
            _searchArticle = ArticleEntity.Select.Where(x => !x.IsPage && x.Title.Contains(e.Value.ToString())).OrderByDescending(x => x.Id).ToList(x => new SelectedItem(x.Id.ToString(), x.Title));
        }
    }

    private Task OnArticleClick(TabItem arg)
    {
        _pageTab = arg.Text;
        return Task.CompletedTask;
    }

    private Task OnArticleAddClick()
    {
        string[] ids;
        SelectedItem[] items;
        switch (_pageTab)
        {
            case "最近":
                ids = _lateArticleValue.Split(',');
                items = _lateArticle.Where(x => ids.Contains(x.Value)).ToArray();
                break;
            case "所有":
                ids = _allArticleValue.Split(',');
                items = _allArticle.Where(x => ids.Contains(x.Value)).ToArray();
                break;
            case "搜索":
                ids = _searchArticleValue.Split(',');
                items = _searchArticle.Where(x => ids.Contains(x.Value)).ToArray();
                break;
            default:
                return Task.CompletedTask;
        }
        MenuService.SaveMenu(items.Select(x => new MenuEntity() {Name = x.Text, MenuType = MenuTypeEnum.Article, NavTitle = x.Text, TypeId = int.Parse(x.Value)}));
        _table.QueryAsync();
        return Task.CompletedTask;
    }
    
    #endregion

    #region CustomUrl

    private string _urlName;

    private string _url;
    
    private Task OnCustomUrlAddClick()
    {
        var menu = new MenuEntity
        {
            Name = _urlName,
            Url = _url,
            NavTitle = _urlName,
            MenuType = MenuTypeEnum.CustomUrl
        };
        MenuService.SaveMenu(menu);
        _table.QueryAsync();
        return Task.CompletedTask;
    }

    #endregion

    #region Table

    private Task<IEnumerable<MenuEntity>> OnTreeExpand(MenuEntity arg)
    {
        return Task.FromResult((IEnumerable<MenuEntity>)arg.Children);
    }

    private Task<QueryData<MenuEntity>> OnQueryAsync(QueryPageOptions arg)
    {
        return Task.FromResult(new QueryData<MenuEntity>()
        {
            Items = MenuService.GetAllMenuTree()
        });
    }

    private Task<bool> OnSaveAsync(MenuEntity arg)
    {
        return Task.FromResult(MenuService.SaveMenu(arg));
    }

    private Task<bool> OnDeleteAsync(IEnumerable<MenuEntity> arg)
    {
        return Task.FromResult(MenuService.DeleteMenu(arg));
    }

    #endregion
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        _lateCatalogue = CatalogService.GetAllCatalogs().Select(x => new SelectedItem(x.Id.ToString(), x.Name)).ToList();
        _allCatalogue = CatalogService.GetCatalogPage(1, 10, out _catalogueTotal).Select(x => new SelectedItem(x.Id.ToString(), x.Name)).ToList();

        _latePage = PageService.GetArticlePage(1, 10).Select(x => new SelectedItem(x.Id.ToString(), x.Title)).ToList();
        _allPage = PageService.GetArticlePage(1, 10, out _pageTotal).Select(x => new SelectedItem(x.Id.ToString(), x.Title)).ToList();
        
        _lateArticle = ArticleService.GetArticlePage(1, 10).Select(x => new SelectedItem(x.Id.ToString(), x.Title)).ToList();
        _allArticle = ArticleService.GetArticlePage(1, 10, out _articleTotal).Select(x => new SelectedItem(x.Id.ToString(), x.Title)).ToList();
    }

    

}