@page "/Article/Catalog"
@using Jx.Cms.Common.Attribute
@using Jx.Cms.Entities.Article
@using Jx.Cms.Service

@inject ICatalogService CatalogService
@inject DialogService DialogService

@attribute [Menu("A0259D93-39EB-462B-A69F-13924963D6AE", "分类目录", "/Admin/Article/Catalog", 4, "fa fa-pencil", MenuIds.ArticleId)]

<Table TItem="CatalogEntity" ShowToolbar="true" ShowDefaultButtons="false" IsBordered="true" IsPagination="true" PageItemsSource="_pageItemSource" OnQueryAsync="OnQueryAsync">
    <TableToolbarTemplate>
        <TableToolbarButton TItem="CatalogEntity" Color="Color.Primary" Icon="fa fa-fw fa-download" Text="下载" OnClickCallback="@OnAddAsync" />
    </TableToolbarTemplate>
    <TableColumns>
        <TableColumn @bind-Field="@context.Name" Text="分类名称"></TableColumn>
        <TableColumn @bind-Field="@context.Alias" Text="分类别名"></TableColumn>
        <TableColumn @bind-Field="@context.Parent" Text="父目录">
            <Template Context="value">
                @if (value == null)
                {
                    @("无")
                }
                else
                {
                    @value.Value.Name
                }
            </Template>
        </TableColumn>
    </TableColumns>
</Table>

@code {
    private readonly IEnumerable<int> _pageItemSource = new[] {10, 20, 30, 40};

    private Task<QueryData<CatalogEntity>> OnQueryAsync(QueryPageOptions arg)
    {
        var catalogEntities = CatalogService.GetCatalogPageWithCount(arg.PageIndex - 1, arg.PageItems, out var count);
        return Task.FromResult(new QueryData<CatalogEntity>()
        {
            Items = catalogEntities,
            TotalCount = (int)count
        });
    }

    private Task<bool> OnSaveAsync(CatalogEntity arg)
    {
        return Task.FromResult(CatalogService.Save(arg));
    }

    private Task OnAddAsync<TItem>(IEnumerable<TItem> arg)
    {
        DialogService?.Show(new DialogOption()
        {
            BodyContext = 0,
            BodyTemplate = builder =>
            {
                var index = 0;
                builder.OpenComponent<ModifyCatalogCompent>(index++);
                builder.CloseComponent();
            }
        });
        return Task.CompletedTask;
    }

}