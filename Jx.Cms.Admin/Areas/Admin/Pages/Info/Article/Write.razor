@page "/Article/Write"
@page "/Article/Write/{Id:int}"
@using Jx.Cms.Common.Attribute
@using Jx.Cms.Common.Enum
@using Jx.Cms.Entities.Article
@using Jx.Cms.Admin.ViewModel
@using Jx.Cms.Plugin.Components
@using Jx.Cms.Plugin.Model
@using Jx.Cms.Plugin.Utils
@using Mapster
@using Furion
@using System.Security.Claims
@using Jx.Cms.Common.Components
@using Jx.Cms.DbContext.Service.Admin
@using Masuit.Tools

@inject NavigationManager NavigationManager
@inject IArticleService ArticleService
@inject ICatalogService CatalogService
@inject ToastService ToastService
@inject DialogService DialogService
@inject PluginDialogService PluginDialogService

@attribute [Menu("A0259D93-39EB-462B-A69F-13924963D6AE", "写文章", "/Article/Write", 5, iconClass:"fa fa-pencil", parentId:MenuIds.ArticleId)]

<ValidateForm class="row" Model="Article" OnValidSubmit="@OnValidSubmit">
    <div class="col-lg-9 col-md-8">
        <div class="row">
            <div class="form-group col-12">
                <BootstrapInput placeholder="请输入标题" @bind-Value="@Article.Title" DisplayText="文章标题" ShowLabel="true"></BootstrapInput>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-12">
                <Switch class="form-control" @bind-Value="@Article.IsMarkdown" OnColor="Color.Success" OnText="启用" OffText="禁用" DisplayText="启用Markdown编辑" OnValueChanged="OnValueChanged"></Switch>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-12">
                <label>文章内容</label>
                @if (Article.IsMarkdown)
                {
                    <Markdown @bind-Value="@Article.Content" Language="zh-CN" Height="400"></Markdown>
                }
                else
                {
                    <Editor IsEditor="true" Height="400" @bind-Value="@Article.Content" CustomerToolbarButtons="@ToolbarButtons" OnClickButton="@OnClickButton"></Editor> 
                }
            </div>
        </div>
        <div class="row">
            <div class="form-group col-12">
                <BootstrapInput @bind-Value="@Article.Alias" DisplayText="别名" ShowLabel="true"></BootstrapInput>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-12">
                <Textarea @bind-Value="@Article.Description" DisplayText="描述" ShowLabel="true"></Textarea>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-12">
                <BootstrapInput @bind-Value="@Article.Labels" DisplayText="文章标签(用,隔开)" ShowLabel="true"></BootstrapInput>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-4">
        <div class="row">
            <div class="form-group col-12">
                <Button IsBlock="true" ButtonType="ButtonType.Submit">提交</Button>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-12">
                <Select style="width: 100%" Items="ArticleStatus" @bind-Value="Article.Status" DisplayText="状态"></Select>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-12">
                <Select style="width: 100%" Items="Catalogs" @bind-Value="Article.CatalogueId" DisplayText="分类"></Select>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-12">
                <DateTimePicker TValue="DateTime" ShowSidebar="true" @bind-Value="@Article.PublishTime" DisplayText="发布时间" ShowLabel="true" ViewModel="DatePickerViewModel.DateTime" />
            </div>
        </div>
    </div>
</ValidateForm>
@code {
    [Parameter]
    public int Id { get; set; }

    private ArticleVm Article { get; set; }

    private IEnumerable<SelectedItem> ArticleStatus { get; set; } = typeof(ArticleStatusEnum).ToSelectList();

    private IEnumerable<SelectedItem> Catalogs { get; set; }
    
    private List<EditorExtModel> EditorExtModels { get; set; }
    
    private List<EditorToolbarButton> ToolbarButtons { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        EditorExtModels = PluginUtil.OnArticleEditorShow();
        ToolbarButtons = EditorExtModels.Select(x => x.ToolbarButton).ToList();
        var mediaButton = new EditorToolbarButton
        {
            Tooltip = "选择媒体",
            ButtonName = "selectMedia",
            IconClass = "fa fa-picture-o"
        };
        ToolbarButtons.Add(mediaButton);
        Catalogs = CatalogService.GetAllCatalogs().Select(x => new SelectedItem(x.Id.ToString(), x.Name));
        Article = (Id == 0 ? new ArticleEntity(){IsPage = false, PublishTime = DateTime.Now, Status = ArticleStatusEnum.Published} : ArticleService.GetArticleById(Id)).Adapt<ArticleVm>();
        if (Article.CatalogueId == 0 && Catalogs.Any())
        {
            Article.CatalogueId = Catalogs.First().Value.ConvertTo<int>();
        }
    }

    private async Task OnValidSubmit(EditContext arg)
    {
        Article.Author = App.User?.FindFirstValue(ClaimTypes.Name);

        var ret = ArticleService.SaveArticle(Article.Adapt<ArticleEntity>());
        await ToastService.Show(new ToastOption()
        {
            Category = ret?ToastCategory.Success: ToastCategory.Error,
            Title = ret?"保存成功":"保存失败",
            Content = $"保存数据{(ret?"成功":"失败")}，4 秒后自动关闭"
        });
        if (ret)
        {
            NavigationManager.NavigateTo("Article/All");
        }        
    }

    private Task OnValueChanged(bool arg)
    {
        Article.Content = "";
        return Task.CompletedTask;;
    }

    private async Task<string> OnClickButton(string arg)
    {
        if (arg == "selectMedia")
        {
            string ret = "";
            await DialogService.ShowModal<MediaSelectComponent>(new ResultDialogOption()
            {
                Title = "请选择媒体",
                IsScrolling = true,
                ComponentParamters = new Dictionary<string, object>
                {
                    {nameof(MediaSelectComponent.MediaSelected), EventCallback.Factory.Create<string>(this, x => ret = x)}
                }
            });
            return ret;
        }
        var model = EditorExtModels.Find(x => x.ToolbarButton.ButtonName == arg);
        if (model == null)
        {
            return "";
        }
        ResultDialogOption option = new ResultDialogOption();
        var type = model.OnDialogCreate(option);
        var res = await model.OnToolbarClick(await PluginDialogService.ShowModal(option, type, DialogService));
        return res;
    }

}