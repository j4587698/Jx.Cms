@page "/Page/All"
@using Jx.Cms.Common.Attribute
@using Jx.Cms.Entities.Article
@using Masuit.Tools.Reflection
@using FreeSql
@using Jx.Cms.DbContext.Service.Admin

@inject IPageService PageService
@inject NavigationManager NavigationManager
@inject ToastService ToastService

@attribute [Menu("164DD37C-8347-42AC-8D60-0D38F03D2E67", "页面列表", "/Page/All", 10, iconClass:"fa fa-newspaper-o", parentId:MenuIds.PageId)]

<Table @ref="_table" TItem="ArticleEntity" ShowToolbar="true" ShowDefaultButtons="false" IsBordered="true" IsPagination="true" ShowExtendButtons="true" 
       ShowEditButtonCallback="item => false" ShowDeleteButtonCallback="item => false" PageItemsSource="_pageItemSource" OnQueryAsync="OnQueryAsync">
    <TableToolbarTemplate>
        <TableToolbarButton TItem="ArticleEntity" Color="Color.Success" OnClick="@AddAsync" Icon="fa fa-plus" Text="新建页面" />
    </TableToolbarTemplate>
    <RowButtonTemplate>
        <Button Size="Size.ExtraSmall" OnClick="@ClickEdit(context)" Icon="fa fa-edit" Text="编辑"></Button>
        <PopConfirmButton Placement="Placement.Left" Size="Size.ExtraSmall"
                                                                      Color="Color.Danger" Icon="fa fa-remove" Text="删除"
                                                                      CloseButtonText="否"
                                                                      Content="是否删除该页面？"
                                                                      ConfirmButtonColor="Color.Danger"
                                                                      ConfirmButtonText="是"
                                                                      OnConfirm="@DeleteAsync(@context)" />
    </RowButtonTemplate>
    <TableColumns>
        <TableColumn @bind-Field="@context.Title" Text="标题">
            <Template Context="value">
                <NavLink href="@($"Page/Write/{(value.Row as ArticleEntity)?.Id}")">@value.Value</NavLink>
            </Template>
        </TableColumn>
        <TableColumn @bind-Field="@context.Author" Text="作者"></TableColumn>
        <TableColumn @bind-Field="@context.UpdateTime" Text="最后修改时间"></TableColumn>
        <TableColumn @bind-Field="@context.Status" Text="状态"></TableColumn>
    </TableColumns>
</Table>

@code {

    private readonly IEnumerable<int> _pageItemSource = new[] {10, 20, 30, 40};

    private Table<ArticleEntity> _table; 

    protected Task<QueryData<ArticleEntity>> OnQueryAsync(QueryPageOptions options)
    {
        var articleEntities = PageService.GetPageWithPage(options.PageIndex - 1, options.PageItems, out long count);
        return Task.FromResult(new QueryData<ArticleEntity>()
        {
            Items = articleEntities,
            TotalCount = (int)count
        });
    }

    private Task AddAsync()
    {
        NavigationManager.NavigateTo("Page/Write");
        return Task.CompletedTask;
    }
    

    private Func<Task> DeleteAsync(ArticleEntity context) => async () =>
    {
        var ret = await PageService.DeletePage(context);
        if (ret)
        {
            await _table.QueryAsync();
        }
        var option = new ToastOption
        {
            Title = $"删除{context.Title}",
            Category = ret ? ToastCategory.Success : ToastCategory.Error,
            Content = $"删除{context.Title}{(ret ? "成功" : "失败")}"
        };
        await ToastService.Show(option);
    };

    private EventCallback ClickEdit(ArticleEntity context) => EventCallback.Factory.Create(this, () =>
    {
        NavigationManager.NavigateTo($"Page/Write/{context.Id}");
    });

}