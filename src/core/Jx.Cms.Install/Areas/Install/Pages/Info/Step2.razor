@page "/Step2"
@using Jx.Cms.DbContext
@using Jx.Cms.Common.Enum
@using Jx.Cms.Common.Extensions
@using Jx.Cms.Common.Utils
@using Furion
@using Jx.Cms.Install.Validator
@using Jx.Cms.Plugin.Service.Both.Impl
@using Jx.Cms.Themes.Vm

@inject SwalService SwalService
@inject SettingsService SettingsService

<div class="container">
    <ValidateForm Model="@DbConfig" OnValidSubmit="@OnSubmit">
        <div class="row">
            <div class="form-group col-12">
                <Select @bind-Value="DbConfig.DbType" Items="typeof(DbTypeEnum).ToSelectList()" DisplayText="数据库类型" OnSelectedItemChanged="OnSelectedItemChanged"></Select>
            </div>
        </div>
        <div class="row" style="@(!_needShow? "display: none": "")">
            <div class="form-group col-12">
                <BootstrapInput @bind-Value="@DbConfig.DbUrl" DisplayText="数据库URL，默认为localhost" ValidateRules="@_validators">
                </BootstrapInput>         
            </div>
        </div>
        <div class="row">
            <div class="form-group col-12" style="@(!_needShow? "display: none": "")">
                <BootstrapInput @bind-Value="@DbConfig.DbPort" type="number" DisplayText="数据库端口号" ValidateRules="@_validators">
                </BootstrapInput>         
            </div>
        </div>
        <div class="row">
            <div class="form-group col-12">
                <BootstrapInput @bind-Value="@DbConfig.DbName" DisplayText="数据库名"></BootstrapInput>    
            </div>
        </div>
        <div class="row">
            <div class="form-group col-12" style="@(!_needShow? "display: none": "")">
                <BootstrapInput @bind-Value="@DbConfig.Username" DisplayText="用户名" ValidateRules="@_validators">
                </BootstrapInput>          
            </div>
        </div>
        <div class="row">
            <div class="form-group col-12" style="@(!_needShow? "display: none": "")">
                <BootstrapInput @bind-Value="@DbConfig.Password" type="password" DisplayText="密码" ValidateRules="@_validators">
                </BootstrapInput>
            </div>
        </div>
        
        <div class="row">
            <div class="form-group col-12">
                <BootstrapInput @bind-Value="@DbConfig.Prefix" DisplayText="表前缀"></BootstrapInput>
            </div>
        </div>
        
        <div class="row">
            <div class="form-group m-auto">
                <Button ButtonType="ButtonType.Submit">验证并继续</Button>
            </div>
        </div>
    </ValidateForm>
</div>

@code {
    [CascadingParameter]
    public EventCallback Next { get; set; }
    
    private DbConfig DbConfig { get; set; }

    private bool _needShow = true;

    private List<IValidator> _validators;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        DbConfig = new DbConfig(){DbType = "Mysql", Prefix = "jx_", DbUrl = "localhost"};
        _validators = new List<IValidator>()
        {
            new InstallValidator()
        };
    }

    private async Task OnSubmit(EditContext arg)
    {
        var ret = DbStartup.SetupDb(ServicesExtension.Services, DbConfig);
        if (!ret.isSuccess)
        {
            await SwalService.Show(new SwalOption()
            {
                Category = SwalCategory.Error,
                Title = "建库失败",
                Content = ret.msg
            });
            return;
        }
        if (!DbStartup.CreateTables(DbConfig))
        {
            await SwalService.Show(new SwalOption()
            {
                Category = SwalCategory.Error,
                Title = "建表失败",
                Content = "数据表创建失败"
            });
            return;
        }
        SystemSettingsVm settingsVm = SystemSettingsVm.Init();
        settingsVm.Title = "JX.CMS";
        settingsVm.SubTitle = "一个基于ASP.NET CORE的CMS";
        settingsVm.Url = $"{App.HttpContext.Request.PathBase}{App.HttpContext.Request.Path}";
        settingsVm.CopyRight = "JX.CMS";
        settingsVm.Save();
        await Next.InvokeAsync();
    }

    private Task OnSelectedItemChanged(SelectedItem arg)
    {
        if (Enum.TryParse(arg.Text, true, out DbTypeEnum dbType))
        {
            switch (dbType)
            {
                case DbTypeEnum.Sqlite:
                    _needShow = false;
                    DbConfig.DbUrl = null;
                    DbConfig.DbPort = null;
                    DbConfig.Username = null;
                    DbConfig.Password = null;
                    break;
                case DbTypeEnum.Mysql:
                    _needShow = true;
                    DbConfig.DbPort = "3306";
                    break;
                case DbTypeEnum.SqlServer:
                    _needShow = true;
                    DbConfig.DbPort = "1433";
                    break;
                case DbTypeEnum.Oracle:
                    _needShow = true;
                    DbConfig.DbPort = "1521";
                    break;
                case DbTypeEnum.Postgresql:
                    _needShow = true;
                    DbConfig.DbPort = "5432";
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
        return Task.CompletedTask;
    }

}