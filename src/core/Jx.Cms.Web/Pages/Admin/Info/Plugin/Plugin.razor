@page "/Admin/Plugin"
@using Jx.Cms.Common.Attribute
@using Jx.Cms.Plugin.Service
@using Jx.Cms.Plugin.Utils

@inject ToastService ToastService
@inject SwalService SwalService
@inject IPluginService PluginService
@inject IDispatchService<string> DispatchService

@attribute [Menu("BFA18170-C2BC-4352-AFB7-E8A15F4C07E1", "插件列表", "Admin/Plugin", 60, iconClass:"fa fa-plug")]

<h3>插件列表</h3>

<Table TItem="PluginConfig" IsBordered="true" Items="@_pluginConfigs" ShowExtendButtons="true" ShowDefaultButtons="false" ShowRefresh="true"
       ShowDeleteButtonCallback="item => false" ShowEditButtonCallback="item => false">
    <TableToolbarTemplate>
        <TableToolbarButton TItem="PluginConfig" Text="添加"></TableToolbarButton>
    </TableToolbarTemplate>
    <RowButtonTemplate>
        <Button Text="@(context.IsEnable?"禁用插件":"启用插件")" Size="Size.ExtraSmall" OnClick="@EnablePlugin(context)"></Button>
        <Button Text="删除插件" Size="Size.ExtraSmall" Color="Color.Danger" OnClick="@DeletePlugin(context)"></Button>
    </RowButtonTemplate>
    <TableColumns>
        <TableColumn @bind-Field="@context.PluginName" Text="插件名"></TableColumn>
        <TableColumn @bind-Field="@context.Version" Text="版本号"></TableColumn>
        <TableColumn @bind-Field="@context.PluginDescription" Text="插件说明"></TableColumn>
    </TableColumns>
</Table>

@code {

    private List<PluginConfig> _pluginConfigs;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _pluginConfigs = PluginService.GetAllPlugins();
    }

    private EventCallback EnablePlugin(PluginConfig context) => EventCallback.Factory.Create(this, () =>
    {
        if (PluginService.ChangePluginStatus(context.PluginId))
        {
            context.IsEnable = !context.IsEnable;
            ToastService.Success("处理成功", $"插件{context.PluginName}{(context.IsEnable ? "启用" : "禁用")}成功");
            DispatchService.Dispatch(new DispatchEntry<string>()
            {
                Name = "menu",
                Entry = "plugin"
            });
        }
        else
        {
            ToastService.Error("处理失败", $"插件{context.PluginName}{(context.IsEnable ? "禁用" : "启用")}失败");
        }
    });

    private EventCallback DeletePlugin(PluginConfig context) => EventCallback.Factory.Create(this, async () =>
    {
        var ret = await SwalService.ShowModal(new SwalOption()
        {
            Content = $"确认删除插件{context.PluginName}吗？此操作不可回退",
            Title = "确认删除",
            Category = SwalCategory.Question
        });
        if (ret)
        {
            if (PluginService.DeletePlugin(context.PluginId))
            {
                _pluginConfigs = PluginService.GetAllPlugins();
                ToastService?.Success("插件删除成功", $"插件{context.PluginName}删除成功");
            }
            else
            {
                ToastService?.Error("插件删除失败", $"插件{context.PluginName}删除失败");
            }
        }
    });

}